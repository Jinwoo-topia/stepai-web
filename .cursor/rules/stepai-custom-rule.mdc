---
description:
globs:
alwaysApply: true
---
# 규칙 모음

## [기본 원칙]

1. 항상 한국어로 간결한 답변을 할 것
2. 작업 착수 전, 프로젝트 경로에 있는 Planner.md를 읽고 작업을 진행할 것(만약 Planner.md가 없다면 새로 생성)
3. 작업 착수 전, Planner.md를 수정하고 컨펌받아 진행할 것 (임의로 진행하지 말 것)
4. Planner 작성 요령은 아래의 [Planner 작성법] 참고할 것
5. 작업 착수 전, 필요한 정보를 얻을 때까지 질문할 것 (중요요)

## [코드 작성 원칙]

### [개발 환경 및 문서화]

- 개발환경이 세팅되면 관련 해당 문서들을 웹에서 찾아보고 최상위 폴더에 Knowledge라는 폴더 작성 후 문서들을 위치시킬 것
- 모든 public 메서드와 클래스에 docstring을 작성할 것
- docstring은 해당 언어의 표준 형식(Python의 경우 PEP 257)을 따를 것
- 함수의 매개변수, 반환값, 발생 가능한 예외를 문서화할 것
- 복잡한 비즈니스 로직이나 알고리즘에 대해서는 별도의 설명 주석을 추가할 것

### [코딩 스타일 및 포맷팅]

- 탭보다 공백을 선호하여 일관되게 4칸의 들여쓰기 공간을 사용할 것
- 줄 길이를 120자 이하로 유지하도록 노력할 것
- 필요한 경우에만 댓글을 추가하고, '무엇을' 하는 것이 아니라 '왜' 어떤 일이 이루어졌는지 설명할 것
- 함수나 메서드 사이에 빈 줄을 추가 및 주석을 추가하여 명확하게 구분할 것
- 조건문 및 루프와 같은 제어 흐름 문을 작성할 때는 들여쓰기 규칙을 엄격히 준수할 것
- 가독성을 높이기 위해 긴 줄을 적절하게 감쌀 것
- 가독성을 높이기 위해 산술 연산자와 논리 연산자 주변에 공백을 삽입할 것

### [네이밍 컨벤션]

- 변수와 함수명은 snake_case를 사용하고, 클래스명은 PascalCase를 사용할 것
- 상수는 UPPER_SNAKE_CASE로 작성하고 파일 상단에 정의할 것
- 불린 변수는 is_, has_, can_, should_ 등의 접두사를 사용하여 의미를 명확히 할 것
- 약어보다는 명확한 단어를 사용하되, 일반적으로 통용되는 약어(id, url, api 등)는 허용할 것

### [코드 구조 및 아키텍처]

- 요구사항을 분석 후 적절한 외부 라이브러리가 있으면 적극적으로 사용하여 Raw부터 작업하는 것을 방지할 것
- 함수형 프로그래밍 및 객체 지향 프로그래밍을 고려할 것 (항상 전체 코드를 염두에 둘 것)
- 가독성이 좋고 확장성 및 유지 보수성이 좋은 코드를 작성할 것
- 함수나 메서드를 작성하여 하나의 작업만 수행할 것
- 재사용 가능한 코드를 별도의 기능, 클래스 또는 모듈로 분리할 것
- 큰 클래스를 작은 클래스로 나누고, 각 클래스는 명확한 목적을 가질 것
- 파일 크기를 약 300줄의 코드 아래로 유지하려고 노력할 것
- 모듈 간의 결합을 줄이기 위해 의존성 주입(DI)을 고려할 것
- 공통 유틸리티 기능을 별도의 유틸리티 모듈에 수집할 것
- UI 구성 요소와 비즈니스 로직을 명확하게 구분할 것

### [에러 처리 전략]

- 예외 처리 시 구체적인 예외 타입을 명시하고, 포괄적인 Exception 사용을 지양할 것
- 사용자 정의 예외 클래스를 생성하여 도메인별 에러를 명확히 구분할 것
- 에러 발생 시 적절한 로그 레벨(ERROR, WARNING)을 사용하여 기록할 것
- 예외 발생 시 스택 트레이스를 보존하고, 필요시 원본 예외를 체이닝할 것

### [상수 관리]

- 매직 넘버나 문자열은 상수로 정의하여 의미를 명확히 할 것
- 설정값들은 별도의 config 파일이나 환경변수로 분리할 것
- 상수 그룹이 많을 경우 enum이나 별도 모듈로 분리하여 관리할 것
- 하드코딩된 값 사용 시 주석으로 그 이유를 명시할 것

### [타입 힌팅]

- 함수의 매개변수와 반환값에 타입 힌트를 명시할 것
- 복잡한 데이터 구조는 TypedDict, dataclass 등을 활용하여 타입을 정의할 것
- Optional, Union 등을 사용하여 null 허용 여부를 명확히 할 것
- 제네릭 타입을 적절히 활용하여 재사용성을 높일 것

### [로깅 및 디버깅]

- 로그를 사용하여 코드 기능을 확인하고 문제를 진단함으로써 오류가 어디에서 발생하는지 확인할 것

### [성능 및 보안]

- 효율적인 알고리즘과 데이터 구조를 사용하여 성능을 최적화할 것
- 보안 취약점(예: SQL Injection, XSS)을 항상 고려하고 방어 코드를 작성할 것

### [테스트]

- 테스트 코드를 작성할 때, 기능의 핵심 논리를 다루는 단위 테스트의 우선순위를 정할 것

### [자동화 및 개발 프로세스]

- 반복 작업을 스크립트나 함수로 자동화할 것을 제안할 것

### [커뮤니케이션 및 설명]

- 제안된 코드 변경 사항에 대한 명확한 설명을 제공할 것
- 새로운 개념이나 라이브러리 사용에 대해 질문할 때, 명확하고 이해하기 쉬운 설명을 제공할 것
- 코드를 생성하기 전에 관련 컨텍스트(파일, 코드 스니펫)를 철저히 고려하고 '@' 명령을 적극적으로 사용할 것
- 필요한 경우, 사용자의 의도를 정확히 이해하기 위해 명확한 질문을 할 것
- 생성된 코드는 항상 공식 문서나 모범 사례를 따를 것

### [코드 리뷰]

- 코드 작성 완료 후 스스로 한 번 검토하는 셀프 리뷰를 수행할 것
- 새로운 기능 추가 시 기존 테스트가 통과하는지 확인할 것
- 성능에 영향을 줄 수 있는 변경사항은 별도로 명시할 것
- 리팩토링과 기능 추가를 분리하여 진행할 것
- 필요한 경우 마지막 작업에 항상 README.md에 내용을 추가할 것

## [Planner 작성법법]

- Planner.md는 항상 프로젝트 폴더 최상위에 위치시킬 것
- 내용을 임의로 삭제하지 말고 아래로 계속 추가할 것
- 유저의 요구사항은 문석해 ### 요구사항분석 에다가 불렛 포인트로 작성할것
- 작업 단위를 매우 작게 쪼갤 것
- 작업에 필요한 사소한 것까지 확인 받고 진행할 것 (ex. 박스 버튼의 사이즈를 어떻게 할까요? 저는 ~~ 사이즈를 추천드립니다.)
- 삽입 시 해당 날짜가 있는지 확인하고 있으면 아래에 추가하여 작성할 것
- 작업항목은 줄글 형태가 아닌 체크박스 형태로 작성할 것
- 체크박스 작성 시 상위 작업, 하위 작업을 나눌 때에는 들여쓰기를 활용할 것
   예시: 체크박스 들여쓰기.
      - [ ] ~~~ 하기
        - [ ] ~~~ 하기
        - [ ] ~~~ 하기
- 작업이 완료되면 Planner.md에서 체크박스를 꼭 체크할 것
- Planner.md 최하단에는 추가 고려 사항으로 항목을 추가하여 유저가 추가한 리스트를 확인할 것
- 착업을 착수하게 되면 해당 작업 항목은 "(진행중)"으로 표시하고 완료 시 체크박스 체크하면서 진행중은 삭제할 것
- 작성 예시
    "## [2025-07-07]"

    "### [요구사항분석]"

    "#### [세부작업내용]"
    "- [ ] ~~~~ 하기"
        " - [ ] ~~~~ 하기"
    "- [ ] ~~~하기"
